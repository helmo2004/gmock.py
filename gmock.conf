#possible variables:
# file: interface file name
# dir: interface directory
# guard: header guard
# template: template parameters
# template_interface: template interface class
# interface: interface class
# mock_methods: generated gmock methods
# generated_dir: generated directory
# mock_file_hpp: mock header file
# mock_file_cpp: mock source file

mock_file_hpp = "Mock%(interface)s.hpp"
mock_file_cpp = "Mock%(interface)s.cpp"

file_template_hpp = """\
/*
 * file generated by gmock: %(mock_file_hpp)s
 */
 
#ifndef %(guard)s
#define %(guard)s

#include <memory>

#include "gmock/gmock.h"
#include "%(dir)s/%(file)s"

%(namespaces_begin)s

%(template)sclass Mock%(interface)s : public %(template_interface)s
{
public:
    /** shortcut to smart pointer */
    using Ptr = std::shared_ptr<Mock%(interface)s>;
    
    /** create a normal mock */
    static Ptr create();
    
    /** create a strict mock */
    static Ptr createStrict(); 
    
    /** implemented default constructor (speed up compile and link) */
    Mock%(interface)s();
    
    /** implemented default destructor (speed up compile and link) */
    virtual ~Mock%(interface)s();

%(mock_methods)s
};

%(namespaces_end)s

#endif // %(guard)s

"""

file_template_cpp = """\
/*
 * file generated by gmock.py: %(mock_file_cpp)s
 */

#include "Mock%(interface)s.hpp"

%(namespaces_begin)s

Mock%(interface)s::Mock%(interface)s()
{}
    
Mock%(interface)s::~Mock%(interface)s()
{}

Mock%(interface)s::Ptr Mock%(interface)s::create()
{
    return std::make_shared<Mock%(interface)s>();
}
    
Mock%(interface)s::Ptr Mock%(interface)s::createStrict()
{
    return std::make_shared<testing::StrictMock<Mock%(interface)s>>();
}

%(namespaces_end)s
"""


